---
- name: Bootstrap python 3 and such
  hosts: vps
  become: true
  tags:
    - bootstrap
    - python 

  roles:
      - mrlesmithjr.ansible_bootstrap_python

  post_tasks:
    - name: Ensure a locale exists
      locale_gen:
        name: en_US.UTF-8
        state: present

- name: Ensure sudo user mikkel is present
  hosts: vps
  become: true

  vars_files:
    - vars/credentials.yml

  tasks:
    - name: Set become group (Ubuntu)
      set_fact: become_group="sudo"
      when: ansible_os_family | lower == "debian"

    - name: Set become group (Redhat)
      set_fact: become_group="wheel"
      when: ansible_os_family | lower == "redhat"

    - name: Ensure user is present and part of sudoers
      user:
        name: martin
        shell: /bin/bash
        groups: '{{ become_group }}'
        append: yes
        password: '{{ system_user_pass }}'
        generate_ssh_key: yes
        ssh_key_bits: 4096

- name: Harden SSH
  hosts: vps
  become: true
  tags:
    - ssh

  vars:
    sshd_log_level: 'INFO'

    
  pre_tasks:
    - name: Set authorized ssh keys
      authorized_key:
        user: martin
        state: present
        key: https://github.com/martinljep.keys

  roles:
    - dev-sec.ssh-hardening

- name: Install acme.sh, aquire certs, and generate dhparams
  hosts: vps
  become: true
  tags:
    - ssl

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  vars:
    acme_sh_copy_certs_to_path: '{{ cert_dir }}'
    acme_sh_become_user: "root"

    acme_sh_default_staging: false
    acme_sh_default_force_issue: false
    acme_sh_default_dns_provider: "dns_cf"
    acme_sh_default_dns_sleep: 120
    acme_sh_default_extra_flags_issue: '-k 4096'
    acme_sh_default_install_cert_reloadcmd: "sudo systemctl reload nginx"

    acme_sh_default_extra_flags_install_cert: "--cert-file {{ cert_dir }}/{{ domain }}.cert"
    acme_sh_domains:
      - domains: ["{{ domain }}", "*.{{ domain }}"]
        debug: False 
    
    dhparams_remote_directory: '{{ cert_dir }}'
    dhparams_key_size: 4096

  roles:
    - { role: "nickjj.acme_sh", tags: ["acme_sh"] }
    - duckle29.dhparam

- name: Ensure the required python-docker bindings are installed
  hosts: vps
  become: true
  tags:
    - docker
    - python
  
  tasks:
    - name: Install docker api and docker-compose api
      pip:
        name:
          - docker
          - docker-compose

- name: Install the latest version of Docker-CE
  hosts: vps
  become: true
  tags:
    - docker
  
  vars:
    docker_edition: 'ce'
    docker_package_state: latest

    docker_service_state: started
    docker_service_enabled: true

    docker_install_compose: true
    
    docker_users:
      - mikkel
  
  roles:
    - geerlingguy.docker

- name: Install nginx
  hosts: vps
  become: true
  tags:
    - nginx

  vars_files:
    - vars/port_usage.yml
    - vars/shared_vars.yml
    - vars/nextcloud/main.yml

  pre_tasks:
    - name: Remove apache
      apt: 
        name: apache2
        state: absent

  roles:
    - nginxinc.nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  post_tasks:    
    - name: Make snippet directory
      file:
        dest: /etc/nginx/snippets
        state: directory
      notify:
        - reload nginx

    - name: Copy ssl snippet
      template:
        src: templates/nginx/ssl_snippets.j2
        dest: /etc/nginx/snippets/ssl
      notify:
        - reload nginx
    
    - name: Remove default nginx site
      file:
        dest: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - reload nginx

- name: Deploy nginx site configs
  hosts: vps
  become: True
  tags:
    - sites
    - nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  vars_files:
    - vars/port_usage.yml
    - vars/shared_vars.yml
    - vars/nextcloud/main.yml
    - vars/credentials.yml

  tasks:

      # Deploys all .conf.j2 files in templates/nginx/sites
    - name: Deploy site configs
      template:
        src: '{{ item }}'
        dest: '/etc/nginx/conf.d/{{ (item | basename | splitext)[0] }}'
      with_fileglob:
        - templates/nginx/sites/*.conf.j2
      notify:
        - reload nginx

- name: Install BitwardenRS
  hosts: vps
  become: true
  tags:
    - bitwarden
  
  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml

  tasks:
    - name: Install passlib
      pip:
        name: passlib

    - name: Generate admin .htpasswd
      community.general.htpasswd:
        path: '{{ bitwarden_htpasswd_path }}'
        name: '{{ bitwarden_admin_user }}'
        password: '{{ bitwarden_admin_pass }}'
        owner: root
        group: www-data
        mode: 0640

    - name: Create BitwardenRS network
      community.docker.docker_network:
        name: bitwarden_rs
    
    - name: Create BitwardenRS volume
      community.docker.docker_volume:
        name: bitwarden_rs
    
    - name: Set up BitwardenRS docker image
      community.docker.docker_container:
        name: bitwarden_rs
        image: bitwardenrs/server:latest
        pull: yes
        networks:
          - name: bitwarden_rs
          - name: bridge
        
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        ports:
          - '{{ portmap.bitwarden[0] }}:80'
          - '{{ portmap.bitwarden[1] }}:3012'
        volumes:
          - 'bitwarden_rs:/data/'
        env:
            SIGNUPS_ALLOWED: 'false'
            SHOW_PASSWORD_HINT: 'false'
            INVITATIONS_ALLOWED: 'false'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

- name: Set up esp OTA server
  hosts: vps
  become: true
  tags:
    - esp
    - ota
  
  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml

  tasks:
    - name: Create htpasswd directory
      file:
        path: "/srv/esp.{{ domain }}"
        state: directory
        owner: nginx
        group: adm

    - name: Create htpasswd file
      community.general.htpasswd:
        path: "/srv/esp.{{ domain }}/.htpasswd"
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        owner: nginx
        group: adm
        mode: 0640
      loop: '{{ esp_ota_users }}'

    - name: Create ESP OTA server data volume
      community.docker.docker_volume:
        name: esp-ota_data
    
    - name: Create ESP OTA container
      community.docker.docker_container:
        name: esp_update_server
        image: kstobbe/esp-update-server:latest
        networks:
          - name: bridge
        ports:
          - '{{ portmap.esp_ota[0] }}:5000'
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        volumes:
          - 'esp-ota_data:/esp-update-server/bin'
        
        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

- name: Install Nextcloud (docker-apache)
  hosts: vps
  become: True
  tags:
    - nextcloud

  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml

  tasks:
    - name: Create nextcloud network
      community.docker.docker_network:
        name: nextcloud

    - name: Create nextcloud mysql volume
      community.docker.docker_volume:
        name: nextcloud_db
    
    - name: Create nextcloud data volume
      community.docker.docker_volume:
        name: nextcloud_data

    - name: Get data volume path
      community.docker.docker_volume_info:
        name: nextcloud_data
      register: nextcloud_data_volume_info

    - name: Set up mysql database for nextcloud
      community.docker.docker_container:
        name: nextcloud-mariadb
        image: mariadb
        command: '--transaction-isolation=READ-COMMITTED --binlog-format=ROW'
        networks:
          - name: nextcloud
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        volumes:
          - 'nextcloud_db:/var/lib/mysql'
        env:
            MYSQL_ROOT_PASSWORD: '{{ mysql_root_pass }}'
            MYSQL_PASSWORD: '{{ nc_database_pass }}'
            MYSQL_DATABASE: 'nextcloud'
            MYSQL_USER: 'nextcloud'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up redis image for nextcloud
      community.docker.docker_container:
        name: nextcloud-redis
        image: redis:alpine
        networks:
          - name: nextcloud
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up nextcloud image
      community.docker.docker_container:
        name: nextcloud
        image: nextcloud
        pull: yes
        networks:
          - name: nextcloud
          - name: bridge
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        ports:
          - '{{ portmap.nextcloud[0] }}:80'
        volumes:
          - 'nextcloud_data:/var/www/html'
        env:
            NEXTCLOUD_TRUSTED_DOMAINS: 'nextcloud.{{ domain }}'
            REDIS_HOST: nextcloud-redis
            MYSQL_HOST: nextcloud-mariadb
            MYSQL_DATABASE: nextcloud
            MYSQL_USER: nextcloud
            MYSQL_PASSWORD: '{{ nc_database_pass }}'
            NEXTCLOUD_ADMIN_USER: '{{ nc_admin_user }}'
            NEXTCLOUD_ADMIN_PASSWORD: '{{ nc_admin_pass }}'
            OVERWRITEPROTOCOL: 'https'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up cron task for nextcloud
      community.docker.docker_container:
        name: nextcloud-cron
        image: nextcloud:apache
        restart_policy: 'unless-stopped'
        volumes:
          - 'nextcloud_data:/var/www/html'
        entrypoint: /cron.sh

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Unset doubled headers
      lineinfile:
        path: '{{ nextcloud_data_volume_info.volume.Mountpoint }}/.htaccess'
        regexp: '{{ item }}'
        state: 'absent'
      loop:
        - '^[\t| ]*Header onsuccess unset X-Frame-Options.*$'
        - '^[\t| ]*Header always set X-Frame-Options "SAMEORIGIN".*$'
        - '^[\t| ]*Header onsuccess unset X-Content-Type-Options.*$'
        - '^[\t| ]*Header always set X-Content-Type-Options "nosniff".*$'

- name: Install Shlink URL shortener
  hosts: vps
  become: True
  tags:
    - shlink
    - urlshort

  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml

  tasks:
    - name: Create shlink network
      community.docker.docker_network:
        name: shlink
      
    - name: Create shlink mysql volume
      community.docker.docker_volume:
        name: shlink_db

    - name: Set up mysql database for shlink
      community.docker.docker_container:
        name: shlink-mariadb
        image: mariadb
        command: '--transaction-isolation=READ-COMMITTED --binlog-format=ROW'
        networks:
          - name: shlink
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        volumes:
          - 'shlink_db:/var/lib/mysql'
        env:
            MYSQL_ROOT_PASSWORD: '{{ mysql_root_pass }}'
            MYSQL_PASSWORD: '{{ shlink_database_pass }}'
            MYSQL_DATABASE: 'shlink'
            MYSQL_USER: 'shlink'
        
        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Start Shlink container
      community.docker.docker_container:
        name: shlink
        image: shlinkio/shlink:stable
        networks:
          - name: shlink
          - name: bridge
        ports:
          - '{{ portmap.shlink[0] }}:8080'
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        env:
            SHORT_DOMAIN_HOST: 'sh.{{ domain }}'
            SHORT_DOMAIN_SCHEMA: 'https'
            GEOLITE_LICENSE_KEY: '{{ shlink_geolite_token }}'
            DB_DRIVER: 'maria'
            DB_NAME: shlink
            DB_USER: shlink
            DB_PASSWORD: '{{ shlink_database_pass }}'
            DB_HOST: shlink-mariadb
            DISABLE_TRACK_PARAM: no-track
        
        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

- name: Install bepasty
  hosts: vps
  become: true
  tags:
    - pastebin
    - bepasty
  
  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml
  
  tasks:
    - name: Create bepasty volume
      community.docker.docker_volume:
        name: bepasty_data
    
    - name: Start bepasty container
      community.docker.docker_container:
        name: bepasty
        image: duckle/bepasty:stable
        networks:
          - name: bridge
        ports:
          - '{{ portmap.bepasty[0] }}:5000'
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        volumes:
          - 'bepasty_data:/srv/bepasty'
        env:
            STORAGE_FILESYSTEM_DIRECTORY: "'/srv/bepasty/storage'"
            SITENAME: "'paste.{{ domain }}'"
            UPLOAD_LOCKED: 'False'
            MAX_ALLOWED_FILE_SIZE: '5 * 1000 * 1000 * 1000'
            MAX_BODY_SIZE: '1 * 1024 * 1024'
            STORAGE: "'filesystem'"
            SECRET_KEY: "'{{ bepasty_secret }}'"
            SESSION_COOKIE_SECURE: 'True'
            PERMANENT_SESSION: 'False'
            PERMANENT_SESSION_LIFETIME: '31 * 24 * 3600'
            DEFAULT_PERMISSIONS: "'read'"
            PERMISSIONS: "{{ bepasty_permissions | join(', ') }}"
        
        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

- name: Set up firewall
  hosts: vps
  become: true
  tags:
    - firewall
    - ufw
  
  vars:
    ufw_allowed_apps:
      - OpenSSH
      - Nginx Full
  
  roles:
    - ufw

- name: Configure unattended upgrades
  hosts: vps
  become: true
  tags:
    - unattended_upgrades
  
  roles:
    - role: jnv.unattended-upgrades
      unattended_mail: 'martin@{{ domain }}'
